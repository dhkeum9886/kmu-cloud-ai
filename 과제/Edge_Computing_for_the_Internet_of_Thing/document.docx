
      <html xmlns:o='urn:schemas-microsoft-com:office:office'
            xmlns:w='urn:schemas-microsoft-com:office:word'
            xmlns='http://www.w3.org/TR/REC-html40'>
      <head>
          <meta charset="utf-8">
          <title>Exported Document</title>
          <style>
              body { font-family: Arial, sans-serif; }
          </style>
      </head>
      <body>
          <h1 id="edgecomputingfortheinternetofthingsacasestudy">Edge Computing for the Internet of Things: A Case Study</h1>
<h2 id="tableofcontents">Table of Contents</h2>
<ul>
<li><strong>Abstract</strong></li>
<li><strong>I. Introduction</strong></li>
<li><strong>II. Edge Computing : Classes and Architectures</strong></li>
<li><strong>III. Enabling Technologies</strong></li>
<li><strong>IV. Edge Computing for IoT Applications</strong></li>
<li><strong>V. Use Case : Mobile Gaming</strong></li>
<li><strong>VI. Discussion</strong></li>
<li><strong>VII. Conclusion</strong></li>
<li><strong>Contributions</strong></li>
</ul>
<hr />
<h2 id="abstract">Abstract</h2>
<h2 id="">배경</h2>
<p>센서·액추에이터 등 <strong>IoT 단말의 데이터가 폭증</strong>했고, 현재 대부분이 <strong>원거리 클라우드 데이터센터</strong>에서 처리됩니다. 이로 인해 <strong>네트워크 대역폭 부담</strong>과 <strong>통신 지연</strong>이 병목으로 부각됩니다.</p>
<h2 id="-1">제안</h2>
<p>본 논문은 <strong>상호작용형 애플리케이션</strong>(예: AR/VR, 실시간 3D)에서의 <strong>센서 스트림 활용</strong>을 위해 <strong>엣지 컴퓨팅</strong>을 제안합니다.</p>
<h2 id="-2">기여</h2>
<ol>
<li><strong>엣지 컴퓨팅 아키텍처·플랫폼 분류 및 서베이</strong>를 제시하고, <strong>엣지에 적합한 IoT 시나리오</strong>를 정리합니다.  </li>
<li><strong>모바일 게임(고연산 3D)</strong>을 대표 사례로, <strong>여러 배치 시나리오에서의 지연</strong>을 실험적으로 비교하여 <strong>엣지 및 핵심 기술</strong>의 효과를 평가합니다.</li>
</ol>
<h2 id="-3">방법</h2>
<ul>
<li><strong>자원 집약적 3D 애플리케이션</strong>을 기준으로, <strong>클라우드 단독 vs 엣지 포함</strong> 등 <strong>다양한 배치</strong>에서의 <strong>응답 지연</strong>을 측정·비교합니다.</li>
</ul>
<h2 id="-4">결과</h2>
<ul>
<li>엣지 컴퓨팅은 <strong>가상/증강 현실</strong> 등 <strong>엄격한 지연 요구</strong>를 가진 애플리케이션에서 <strong>요구 성능 충족에 필수</strong>임을 보입니다.</li>
</ul>
<h2 id="-5">결론</h2>
<ul>
<li><strong>현재 엣지 플랫폼으로 가능한 범위</strong>와 <strong>향후 기술 진화가 IoT 배치에 미칠 영향</strong>을 논의합니다.</li>
</ul>
<h2 id="keywords">Keywords</h2>
<p><strong>edge computing</strong>, <strong>fog computing</strong>, <strong>Internet of Things</strong>, <strong>mobile gaming</strong></p>
<hr />
<h2 id="iintroduction">I. Introduction</h2>
<h2 id="-6">배경과 문제</h2>
<ul>
<li>모바일·IoT 단말(센서, 스마트폰, 웨어러블)의 데이터 생성이 급증하는 반면, <strong>연산·에너지 제약</strong>이 큼.</li>
<li>이를 완화하기 위해 <strong>클라우드 오프로딩</strong>이 널리 사용되지만, 대규모 <strong>원거리 데이터센터</strong> 의존으로</li>
<li><strong>높은 지연(latency)</strong></li>
<li><strong>클라우드 구간 네트워크 부하 증가</strong> 문제가 발생.</li>
</ul>
<h2 id="-7">엣지/포그 컴퓨팅의 개념과 효과</h2>
<ul>
<li><strong>정의</strong>: 네트워크 <strong>엣지(단말 인접 지점)</strong>에 연산·저장 자원을 배치하여 단말과 <strong>가까운 곳에서 처리</strong>.</li>
<li><strong>효과</strong></li>
<li><strong>지연 감소</strong>: 단말에서 <strong>한 홉</strong> 인근에서 전처리/분석 가능.</li>
<li><strong>백홀 절감</strong>: 대용량/빈번 데이터는 엣지에서 가공 후 핵심만 클라우드로 전송 → <strong>대역폭 절약</strong>.</li>
<li><strong>이동성/지리적 분산 지원</strong>: 단말 이동·분산 IoT 서비스에 적합(차량 콘텐츠, 모바일 데이터 실시간 분석, 환경 모니터링 등).</li>
</ul>
<h2 id="cdnicn">CDN/ICN과의 차이</h2>
<ul>
<li><strong>CDN/ICN</strong>: <strong>비대화형(정적/캐시 가능한) 콘텐츠</strong>를 사용자 근처에 배치·라우팅 최적화.</li>
<li><strong>엣지 컴퓨팅</strong>: <strong>연산 능력</strong>을 제공하여 <strong>대화형/실시간 애플리케이션</strong>과 <strong>모빌리티</strong>까지 지원.</li>
<li>예: IoT 데이터는 캐시 가능하더라도, <strong>엣지 서버에서 상호작용/추론/제어</strong> 수행 가능.</li>
</ul>
<h2 id="-8">프라이버시·에너지 관점 이점</h2>
<ul>
<li><strong>프라이버시</strong>: IoT 데이터가 <strong>엣지 노드 내에서 저장·처리</strong>되어 <strong>민감 정보 사전 제거</strong> 후 클라우드 전송 가능.</li>
<li><strong>에너지</strong>: <strong>근거리 오프로딩</strong>으로 단말의 <strong>배터리 소모 감소</strong>.</li>
</ul>
<h2 id="-9">본 논문의 기여</h2>
<ol>
<li><strong>엣지 컴퓨팅 아키텍처·플랫폼 분류 및 서베이</strong>, 그리고 <strong>엣지에 적합한 IoT 애플리케이션 시나리오</strong> 제시.</li>
<li><strong>모바일 게임</strong>을 대표 사례로 <strong>엣지·핵심 기술(예: 오프로딩)의 성능 평가</strong> 수행 → <strong>만족스러운 QoE 달성에 엣지가 필수</strong>임을 실증.</li>
</ol>
<ul>
<li>모바일 게임은 <strong>초저지연·신뢰 통신</strong>과 <strong>단말 센서 데이터</strong>(위치 등)를 활용(예: Pokémon Go, Ingress).  </li>
<li>더 넓게는 <strong>복잡 3D 렌더링</strong>이 필요한 <strong>AR/VR</strong> 등에도 일반화 가능.</li>
</ul>
<h2 id="-10">논문 구성 안내</h2>
<ul>
<li><strong>Section II</strong>: 엣지 플랫폼 <strong>분류/아키텍처</strong>.</li>
<li><strong>Section III</strong>: 엣지의 <strong>핵심 구현 기술(Enablers)</strong>.</li>
<li><strong>Section IV</strong>: <strong>IoT 요구사항</strong>과 엣지의 <strong>이점</strong>.</li>
<li><strong>Section V</strong>: <strong>모바일 게임 성능 평가 결과</strong>.</li>
<li><strong>Section VI</strong>: 결과와 <strong>현 기술과의 연계 논의</strong>.</li>
<li><strong>Section VII</strong>: <strong>결론 및 향후 연구 방향</strong>.</li>
</ul>
<hr />
<h2 id="iiedgecomputingclassesandarchitectures">II. Edge Computing : Classes and Architectures</h2>
<p>엣지 컴퓨팅 아키텍처는 ‘엣지’의 정의·참여 노드·용어가 문헌마다 다르다. 특성에 따라 <strong>세 가지 클래스</strong>로 분류한다.</p>
<hr />
<h3 id="ii1resourcerichedgecloudlets">II-1. Resource-Rich Edge (Cloudlets)</h3>
<ul>
<li><strong>핵심 아이디어</strong>: 최종 단말에 1~몇 홉 거리의 네트워크 지점에 <strong>고성능 서버(클러스터)</strong>를 배치하여 저지연 처리를 제공.</li>
<li><strong>대표 구현</strong></li>
<li><strong>Cloudlet</strong>(VM 기반): Wi-Fi AP/기지국 인근에 “<strong>data center in a box</strong>” 배치 → 다중 코어 연산·저장소·무선 LAN 제공. 인지 보조, 크라우드 비디오 분석 등 실시간 처리에 활용.</li>
<li><strong>Micro Data Center / Micro Cloud</strong>: 수천 대 서버를 가진 소형 데이터센터 또는 AP/기지국/펨토셀/차량에 소수 서버를 배치하여 인터랙티브 앱/콘텐츠 호스팅.</li>
<li><strong>MEC (Multi-access Edge Computing)</strong>: 이동통신 <strong>RAN(기지국/컨트롤러)</strong>에 IT/스토리지/가상화 자원을 통합. <strong>실시간 무선 링크 정보</strong>를 엣지 앱에 노출 가능. 모바일 외 <strong>다중 액세스</strong> 환경(실내 게이트웨이 등)으로 확장.</li>
<li><strong>장점</strong>: 낮은 지연, 높은 처리량, 무선 상태 정보 활용, 서비스 근접성.</li>
<li><strong>고려사항</strong>: 배치·운영 비용, 위치 선정, 규모 확장/오케스트레이션.</li>
</ul>
<hr />
<h3 id="ii2heterogeneousedgenodes">II-2. Heterogeneous Edge Nodes</h3>
<ul>
<li><strong>핵심 아이디어</strong>: 서버·라우터·AP·셋톱박스·<strong>스마트폰/차량 등 단말까지</strong> 포함한 <strong>이기종 자원</strong>을 가상화로 묶어 협력 처리.</li>
<li><strong>대표 구현</strong></li>
<li><strong>Fog Computing</strong>: 리소스 풍부 서버부터 경량 엣지 라우터·AP·단말까지 <strong>높이 가상화된 계층</strong>으로 구성. 다양한 <strong>무선 액세스 기술</strong>을 포괄.</li>
<li><strong>단말 협력(Local Cloud)</strong>: 인근 단말들이 <strong>자발적 협력</strong>으로 로컬 클라우드를 형성, <strong>로컬 리소스 코디네이터</strong>가 태스크 할당(단말/백엔드 클라우드로 분산).</li>
<li><strong>저전력 미니 클러스터</strong>: Raspberry Pi 등 <strong>소형·저전력 노드</strong>를 묶은 <strong>휴대형 미니 클라우드</strong>(실내/야외 배치).</li>
<li><strong>장점</strong>: 자원 활용 극대화, 배치 유연성, 네트워크/전력 제약 환경에서의 탄력성.</li>
<li><strong>고려사항</strong>: 이기종 관리 복잡도, 신뢰/보안, 이동성·가용성 변동, QoS 보장.</li>
</ul>
<hr />
<h3 id="ii3edgecloudfederation">II-3. Edge–Cloud Federation</h3>
<ul>
<li><strong>핵심 아이디어</strong>: <strong>엣지 자원과 중앙 데이터센터</strong>를 연합하여 위치·부하·지연·대역폭 조건에 따라 동적 오케스트레이션.</li>
<li><strong>대표 구현</strong></li>
<li><strong>Edge Cloud</strong>: 엣지 앱이 <strong>근거리 처리+원거리 클라우드</strong>를 함께 사용(예: 실내 3D 위치/영상 모니터링).</li>
<li><strong>프라이빗–퍼블릭 클라우드 연합</strong>: 엣지 노드가 연합을 <strong>동적 오케스트레이션</strong>하여 실행 태스크 극대화.</li>
<li><strong>분산 실행 존</strong>: 인터넷 전반(라우터/AP/기지국 등)에 분산된 <strong>지리적 실행 영역</strong>에 서비스 배포.</li>
<li><strong>미러링 기반 엣지 AI</strong>: 공개 클라우드 서비스/레포지토리를 엣지에 <strong>미러링</strong>하여 <strong>저지연·저대역폭</strong> 이미지 분류 등 ML 작업 수행.</li>
<li><strong>장점</strong>: 지연·대역폭·비용·규모의 <strong>동적 최적화</strong>, 기존 클라우드 생태계 재사용.</li>
<li><strong>고려사항</strong>: 연합 간 <strong>상호 운용성</strong>, 데이터 이동/일관성, 보안/정책, 오케스트레이션 복잡도.</li>
</ul>
<hr />
<h2 id="iiienablingtechnologies">III. Enabling Technologies</h2>
<p>5G 전환과 함께 초저지연·고신뢰 통신, 스펙트럼 부족, 에너지 효율, 이기종 단말 데이터 폭증에 대응해야 한다. NFV/SDN은 네트워크 기능·서비스를 <strong>프로그래머블</strong>하고 <strong>유연</strong>하게 배치하게 하며, 이는 <strong>엣지 컴퓨팅</strong>의 핵심 기반이 된다.</p>
<hr />
<h3 id="iii1virtualization">III-1. Virtualization</h3>
<ul>
<li><strong>개념</strong>: 단일 물리 서버에서 여러 독립 인스턴스(주로 VM)를 <strong>격리</strong> 실행.</li>
<li><strong>VM vs 컨테이너</strong></li>
<li><strong>VM</strong>: 하이퍼바이저+게스트 OS → <strong>강한 격리</strong>, <strong>높은 오버헤드</strong>.</li>
<li><strong>컨테이너</strong>: 호스트 OS <strong>공유</strong>(커널 격리) → <strong>경량</strong>, <strong>빠른 기동</strong>, <strong>우수한 성능</strong>.</li>
<li><strong>마이그레이션</strong></li>
<li>VM/컨테이너를 타 서버로 이동해 <strong>에너지 절감</strong>, <strong>부하 적응</strong>, <strong>사용자 이동성</strong> 대응.</li>
<li><strong>라이브 마이그레이션</strong>으로 <strong>중단 시간 최소화</strong>.</li>
<li><strong>엣지 의의</strong>: 엣지 노드 간 워크로드 <strong>유연 이동/확장</strong> 가능. NFV/SDN의 <strong>기반 기술</strong>.</li>
</ul>
<hr />
<h3 id="iii2networkfunctionvirtualization">III-2. Network Function Virtualization</h3>
<ul>
<li><strong>NFV (Network Function Virtualization)</strong><br />
네트워크 기능을 <strong>범용 하드웨어</strong>에서 <strong>소프트웨어 모듈(VNF)</strong>로 실행 → 전용 장비 의존 감소, <strong>적절한 위치(엣지 포함)</strong>에 유연 배치.</li>
<li><strong>SDN (Software-Defined Networking)</strong><br />
<strong>제어 평면</strong>과 <strong>데이터 평면</strong> 분리, <strong>중앙 논리 컨트롤러</strong>로 정책/경로를 <strong>소프트웨어적으로 관리</strong> → <strong>유연성·민첩성</strong> 향상.</li>
<li><strong>조합 효과(엣지)</strong><br />
수요 급증(예: 지역 IoT 트래픽)에 맞춰 <strong>가상 리소스 자동 증설/오케스트레이션</strong>, <strong>정책·라우팅</strong> 유연 변경 → <strong>신규 서비스 신속 출시</strong>, <strong>운영비 절감</strong>.</li>
</ul>
<hr />
<h3 id="iii3computationoffloading">III-3. Computation Offloading</h3>
<ul>
<li><strong>개념</strong>: 리소스 제약 단말의 연산/저장을 <strong>클라우드 또는 엣지</strong>로 위임하고 결과만 수신.</li>
<li><strong>효과</strong></li>
<li>단말 <strong>배터리 소모 감소</strong>, 고복잡 연산을 단말 사양과 무관하게 수행.</li>
<li><strong>엣지 오프로딩</strong> 시 지연·에너지 비용 <strong>추가 절감</strong>.</li>
<li><strong>활용 예</strong>: 모바일 게임, m-러닝, <strong>자연어 처리(NLP)</strong>, 모바일 헬스케어 등 <strong>고연산 애플리케이션</strong>을 저사양 단말에서도 구동.</li>
</ul>
<hr />
<h2 id="ivedgecomputingforiotapplications">IV. Edge Computing for IoT Applications</h2>
<h2 id="iot">IoT와 엣지의 궁합</h2>
<p>IoT 단말(센서·스마트폰·웨어러블·머신)은 <strong>연산·전력 제약</strong>이 크며, 생성 데이터는 점점 <strong>대역폭 집약적</strong>이고 <strong>지리적으로 분산</strong>됩니다. 엣지 컴퓨팅은 단말 <strong>근접 위치</strong>에서 데이터를 처리·저장해 <strong>지연을 줄이고</strong> <strong>백홀 부하를 완화</strong>하며 <strong>이동성</strong>을 지원합니다.</p>
<hr />
<h2 id="iot-1">IoT 특성별 엣지의 필요성</h2>
<ul>
<li><strong>저지연 통신 필수</strong>: 커넥티드카, 모바일 게임, 원격 헬스, 물류, 산업 제어 등은 <strong>단말 생성 데이터의 실시간 처리</strong>가 핵심.</li>
<li><strong>대역폭 집약 데이터 근접 처리</strong>: 감시카메라·순찰차·사용자 단말의 <strong>영상/센서 데이터</strong>를 <strong>한 홉 인근</strong>에서 분석 → 클라우드 전송량 감소, 예) <strong>재난·공공안전</strong>에서 위험 지역 영상을 현지 처리.</li>
<li><strong>지리적 분산 처리</strong>: 센서 네트워크 기반 사례(예: <strong>도로변 RSU의 충돌 회피</strong>)는 차량·보행자 <strong>위치/속도/가속도</strong>를 <strong>로컬</strong>에서 처리해야 저지연 달성.</li>
<li><strong>단말 이동성</strong>: 단말 이동에 맞춰 <strong>가상화 자원 마이그레이션</strong>을 수행, <strong>QoE</strong> 유지.</li>
</ul>
<hr />
<h2 id="-11">상호작용형(인터랙티브) 애플리케이션의 부상</h2>
<ul>
<li><strong>디지털–물리 세계의 실시간 결합</strong>: 센서/사용자 입력과 <strong>인공 3D 시나리오</strong>의 융합(예: 사람의 제스처/동작을 가상 환경에 실시간 반영).</li>
<li><strong>지각–행동 루프의 시간 제약</strong>: 사람의 반응시간은 상황에 따라 <strong>수 ms 수준</strong>까지 요구될 수 있음. <strong>AR/VR</strong>은 특히 <strong>극저지연·고신뢰</strong>가 필수.</li>
<li><strong>모바일 AR 게임 사례</strong>: Pokémon Go 등은 <strong>사용자 위치·센서</strong>를 활용, 향후 <strong>웨어러블 센서</strong> 연계를 통해 더 <strong>몰입·상황인지형</strong>으로 진화. <strong>멀티유저</strong>일수록 지연 영향이 큼.</li>
</ul>
<hr />
<h2 id="-12">왜 클라우드만으로는 부족한가</h2>
<ul>
<li>클라우드는 연산·저장 자원이 풍부하지만 <strong>물리적으로 멀어</strong> <strong>왕복 지연</strong>이 커지고, <strong>네트워크 링크 부담</strong>이 증가 → <strong>인터랙티브·실시간</strong> 용도에 <strong>QoE 저하</strong> 발생.</li>
</ul>
<h2 id="-13">엣지가 제공하는 해법</h2>
<ul>
<li><strong>사용자 근접 연산/저장</strong>으로 <strong>지연 단축</strong>.</li>
<li><strong>근원지 전처리</strong>로 <strong>대역폭 절감</strong> 및 <strong>프라이버시 보호</strong>(민감정보 선제 제거 후 전송 가능).</li>
<li><strong>가상화·오프로딩·마이그레이션</strong>을 통해 <strong>이동성</strong>과 <strong>지리적 분산</strong>을 견딤.</li>
</ul>
<hr />
<h2 id="vusecasemobilegaming">V. Use Case : Mobile Gaming</h2>
<ul>
<li><strong>목적</strong>: 엣지 컴퓨팅이 <strong>상호작용형 3D 애플리케이션(모바일 게임, AR/VR)</strong>의 <strong>지연</strong> 요구를 충족하는지 실험적으로 검증.</li>
<li><strong>게임</strong>: <strong>Neverball</strong>(오픈소스 3D 아케이드) — 단말이 입력(기울기 등)을 서버로 전송 → 서버가 렌더링 후 <strong>비디오 스트리밍</strong>으로 단말에 전송.</li>
<li><strong>핵심 지표</strong>: <strong>Response Delay = PD(서버 처리) + OD(클라이언트 디코드/재생) + ND(네트워크 RTT)</strong>.</li>
</ul>
<hr />
<h3 id="v1testbedsetup">V-1. Testbed Setup</h3>
<ul>
<li><strong>플랫폼</strong>: <strong>GamingAnywhere</strong>(오픈소스 클라우드 게이밍).</li>
<li><strong>클라이언트</strong>: Google <strong>Nexus 5</strong> (Android 5.1.1).</li>
<li><strong>서버(로컬 워크스테이션)</strong>: Intel Xeon E3-1230(4C), RAM 16GB, <strong>NVIDIA Quadro 2000 ×2</strong>.</li>
<li><strong>네트워크</strong>: <strong>Wi-Fi</strong> / <strong>LTE(NetLeap 4G, Nokia)</strong> — 동일 대학망 사용.</li>
<li><strong>서버 배치 시나리오(3)</strong><br />
1) <strong>Edge</strong>: LTE 기지국 <strong>공위치(co-located)</strong> 또는 동일 무선망 <strong>근거리</strong> 워크스테이션.<br />
2) <strong>전용 클라우드(CSC cPouta, Kajaani)</strong>: OpenStack 기반 <strong>핀란드</strong> 전용 연구 클라우드.<br />
3) <strong>퍼블릭 클라우드(AWS EC2)</strong>: <strong>프랑크푸르트·아일랜드</strong> 리전(GPU 인스턴스).</li>
<li><strong>가상화 구성(3)</strong>: <strong>Bare Metal(B)</strong> / <strong>Container(C, Docker 1.10.3)</strong> / <strong>VM(V, QEMU 2.5.0)</strong> — <strong>GPU 1개 패스스루</strong>.</li>
<li><strong>EC2 인스턴스</strong>: g2.2xlarge(1 GPU, 8 vCPU) / g2.8xlarge(4 GPU, 32 vCPU), <strong>Dedicated Instances</strong> 사용.</li>
<li><strong>방법론</strong>: 섹션별 4회 반복, <strong>사전 기록된 입력 재생</strong>으로 일관성 확보, <strong>30 FPS / 4.5 Mbps</strong>로 스트리밍.</li>
</ul>
<hr />
<h3 id="v2experimentalresults">V-2. Experimental Results</h3>
<h3 id="1nd">1) 네트워크 지연(ND)</h3>
<ul>
<li><strong>핀란드 내(엣지·전용 클라우드)</strong>: <strong>< 25 ms</strong>, 엣지(LTE)에서는 <strong>< 20 ms</strong> 달성(현행 무선 통신의 상한선 수준).</li>
<li><strong>퍼블릭 클라우드(원격 리전)</strong>: <strong>≥ 50 ms</strong> (최소 2배 ↑). 거리(약 <strong>1,500–2,000 km</strong>)가 커질수록 ND 증가.</li>
<li><strong>Wi-Fi vs LTE</strong>: 평균 <strong>Wi-Fi가 더 짧지만 분산(지터) ↑</strong>, <strong>LTE는 지터 ↓</strong>로 <strong>스트리밍</strong>에 더 안정적.</li>
</ul>
<h3 id="2pdodvs">2) 처리 지연(PD) &amp; 재생 지연(OD) vs 해상도 &amp; 가상화</h3>
<ul>
<li><strong>컨테이너 ≈ 베어메탈</strong>: 해상도와 무관하게 <strong>동일 수준</strong> 성능.  </li>
<li>**VM은 PD 약 *<em>+30%</em>* 증가** → 1280×720에서 <strong>컨테이너는 30 FPS 유지</strong> 가능, <strong>VM은 미달</strong>.</li>
<li><strong>1920×1080(Full HD)</strong>: <strong>모든 구성</strong>에서 <strong>목표 30 FPS 불가</strong>.</li>
<li><strong>OD(클라이언트)</strong>: FHD 미만에서 <strong>PD와 비슷한 크기</strong>, 해상도↑에 따라 증가하나 <strong>평균 25 ms 이내</strong>.  </li>
<li><strong>분산은 OD > PD</strong>, 해상도↑ 및 <strong>VM 사용 시</strong> 분산 더 큼.</li>
</ul>
<h3 id="3nd">3) 클라우드의 추가 연산자원이 ND를 상쇄할 수 있는가?</h3>
<ul>
<li><strong>EC2 g2.2xlarge</strong>: 800×600, 1280×720에서 <strong>베어메탈보다 PD↓</strong>, 그러나 <strong>1920×1080에서는 +5 ms</strong>(베어메탈 대비).</li>
<li><strong>EC2 g2.8xlarge</strong>: 모든 해상도에서 <strong>베어메탈보다 PD↓</strong>.</li>
<li><strong>핵심 원인</strong>: PD의 대부분이 <strong>인코딩 지연</strong>(렌더링보다)에서 발생 → GPU 늘려도 <strong>체감 이득 제한적</strong>.  </li>
<li>예) 800×600에서 g2.2xlarge는 <strong>베어메탈 대비 −12 ms</strong>, 1920×1080에서 <strong>−8 ms</strong> 수준.</li>
</ul>
<hr />
<h2 id="-14">해석 및 시사점</h2>
<ul>
<li><strong>근접 배치(엣지)</strong>가 <strong>ND를 압도적으로 단축</strong> → <strong>총 응답지연</strong>에서 결정적.  </li>
<li><strong>경량 가상화(컨테이너)</strong>는 <strong>베어메탈급</strong> 성능, <strong>하이퍼바이저형 VM</strong>은 <strong>유의미한 오버헤드</strong>.  </li>
<li><strong>FHD 스트리밍은 병목(인코딩·디코딩)</strong>으로 <strong>30 FPS 달성 어려움</strong> → <strong>해상도/코덱/파이프라인 최적화</strong> 필요.</li>
<li><strong>더 강력한 클라우드 GPU</strong>도 <strong>원격 ND</strong>를 <strong>완전히 상쇄</strong>하지 못함 → 상호작용형 3D/AR/VR에는 <strong>엣지 우선 배치</strong>가 유리.</li>
</ul>
<hr />
<h2 id="vidiscussion">VI. Discussion</h2>
<h2 id="-15">결론</h2>
<ul>
<li><strong>엣지 배치가 QoE 달성의 사실상 유일한 해법</strong>: 사용자와 <strong>근접(접속망 엣지)</strong> 에 연산 자원을 두어야 상호작용형 서비스의 응답지연을 만족.  </li>
<li><strong>지연 임계값</strong>: 일반 인터랙션은 <strong>< 150 ms</strong> 수용 가능하지만, <strong>빠른 상호작용은 70 ms 초과 시 체감 품질 악화</strong>. 퍼블릭 클라우드(원격 리전) 기반에선 해당 목표 달성이 어려움.</li>
<li><strong>엣지 vs 클라우드의 본질적 차이</strong>: 클라우드의 <strong>추가 연산능력</strong>으로 <strong>처리지연(PD)</strong> 을 줄여도, <strong>네트워크지연(ND)</strong> 을 상쇄하기에 <strong>불충분</strong>. 반면 <strong>모바일 네트워크 엣지</strong> 배치는 HD 해상도에서도 <strong>< 70 ms</strong> 달성이 가능.</li>
</ul>
<h2 id="-16">확장성·멀티유저 시나리오에서의 함의</h2>
<ul>
<li><strong>세션 격리 모델</strong>: 모바일(클라우드) 게이밍과 유사하게 <strong>사용자당 1 VM/컨테이너</strong> 모델을 엣지에 적용해도 기본 관찰치는 동일하게 유지.</li>
<li><strong>데이터센터(엣지) 내부 지연 최적화</strong>: <strong>플로우 제어</strong>로 마이크로서비스 간 서비스 지연을 축소 가능.</li>
<li><strong>스케일 아웃 전략</strong>: <strong>가상화·NFV·SDN</strong>을 통해 이용자 증가에 따라 <strong>게임 모듈(VNF) 자동 배치</strong>, <strong>네트워크 정책/라우팅 동적 제어</strong>, <strong>인코딩 파라미터 자동 튜닝</strong> 수행.</li>
<li><strong>오케스트레이션</strong>: 게임 요구사항에 맞춰 <strong>고성능 VM/컨테이너</strong>를 선택 기동, <strong>라이브 마이그레이션</strong>으로 이동 사용자에 대한 세션 연속성 유지.</li>
</ul>
<h2 id="-17">인프라 트렌드와 과제</h2>
<ul>
<li><strong>엣지 노드의 증가</strong>: 통신사·콘텐츠/서비스 사업자의 엣지급 연산 장비가 빠르게 확산 → <strong>노드 선택·관리</strong>가 핵심 이슈로 부상(배치 최적화, SLA, 비용).</li>
<li><strong>자원할당 최적화의 복잡성</strong>: 지연·대역폭·비용·에너지·이동성 제약을 동시에 만족해야 하는 <strong>실시간 최적화</strong> 문제로 고도화.</li>
</ul>
<h2 id="5g">기술적 한계와 5G의 목표</h2>
<ul>
<li><strong>현재 한계</strong>: 무선/컴퓨팅 기술의 한계로 <strong>10 ms 이하 응답시간</strong>은 근본적 혁신 없이 달성 곤란.</li>
<li><strong>5G 목표</strong>: <strong>1 ms</strong> 저지연을 지향하지만, <strong>접속망 이후 구간</strong>의 지연 요인 최소화에는 여전히 불확실성 존재.</li>
<li><strong>확실한 사실</strong>: 이러한 야심 찬 목표에 접근하기 위해서는 <strong>엣지 컴퓨팅이 필수</strong>.</li>
</ul>
<hr />
<h2 id="viiconclusion">VII. Conclusion</h2>
<ul>
<li><strong>결론</strong>: 엣지 컴퓨팅은 빠르게 상호작용하는 모바일 게임 같은 신흥 IoT 애플리케이션에 <strong>필수적</strong>이다.  </li>
<li><strong>지연의 본질</strong>: 지역 데이터센터는 네트워크 지연을 <em>상당히</em> 줄여주지만, <strong>사용자 체감 품질(QoE)</strong> 을 만족시키기엔 부족하다.  </li>
<li><strong>클라우드 스케일의 한계</strong>: 클라우드 서버의 연산 성능을 늘려도 <strong>네트워크 지연 증가를 상쇄할 수 없다</strong>.  </li>
<li><strong>실무적 시사점</strong>: <strong>엣지에 제한적 자원만 배치</strong>해도 대상 사례(모바일 게임)의 <strong>체감 품질이 유의미하게 개선</strong>된다.  </li>
<li><strong>향후 연구 방향</strong></li>
<li>엣지 컴퓨팅 기반 모바일 게임에 대한 <strong>대규모 실증 평가</strong>, 특히 <strong>온라인 멀티플레이</strong> 환경을 포함한 연구</li>
<li><strong>애플리케이션 시나리오별 다양한 엣지 아키텍처</strong> 간 <strong>성능 비교 연구</strong></li>
<li><strong>연구 기대</strong>: 본 연구가 <strong>엣지 컴퓨팅 기반 응용 분야의 후속 연구를 촉진</strong>하길 기대한다.</li>
</ul>
<hr />
<h2 id="contributionsauthorsstatement">Contributions — Authors’ Statement</h2>
<ul>
<li><strong>분류·서베이</strong>: 엣지 컴퓨팅 <strong>아키텍처와 플랫폼</strong>을 분류·조사하고, 엣지의 이점을 얻는 <strong>핵심 IoT 응용 시나리오</strong>를 서술. </li>
<li><strong>실증 평가</strong>: <strong>모바일 게이밍</strong>을 대표 사용례로, 엣지 및 그 <strong>기반 기술</strong>의 실험적 평가 수행.</li>
</ul>
      </body>
      </html>
    